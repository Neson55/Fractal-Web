// Need to use the React-specific entry point to import `createApi`
import { createApi, fetchBaseQuery } from "@reduxjs/toolkit/query/react"

interface Repo {
  stargazers_count: number
  name: string
  countRepos: number
  length: number
}

interface UserApiResponse {
  repos: Repo[]
  nickname: string
  users: string[]
  login: string
  id: number
}

// Define a service using a base URL and expected endpoints
export const githubApiSlice = createApi({
  baseQuery: fetchBaseQuery({ baseUrl: "https://api.github.com/" }),
  reducerPath: "usersApi",
  // Tag types are used for caching and invalidation.
  tagTypes: ["Users", "Repos"],
  endpoints: build => ({
   //Supply generics for the return type (in this case `QuotesApiResponse`)
    //and the expected query argument. If there is no argument, use `void`
    //for the argument type instead.
    getUsers: build.query<UserApiResponse, string>({
      query: (nickname) => `users/${nickname}`,
      // `providesTags` determines which 'tag' is attached to the
      // cached data returned by the query.
      providesTags: ['Users'],
    }),
    getNumsOfRepos: build.query<Repo, string>({
      query: (nickname) => `users/${nickname}/repos`,
      providesTags: ['Users'],
    }),
    getRepos: build.query<Repo, string>({
      query: (nicknameAndRepo) => `repos/${nicknameAndRepo}`,
      providesTags: ['Repos'],
    })
  }),
})

// Hooks are auto-generated by RTK-Query
// Same as `quotesApiSlice.endpoints.getQuotes.useQuery`
export const { useGetUsersQuery, useGetNumsOfReposQuery, useGetReposQuery } = githubApiSlice
